#define CURRENT_SENSOR_H #include <SimpleKalmanFilter.h> #define VREF 3300
#define ADC_SAMPLE_COUNT 300
#define ADC_READING_COUNT 8
#define ADC_STEPS 4096
#define STEP_PER_MV ADC_STEPS/VREF #define MV_PER_STEP VREF/ADC_STEPS #define ADC_READ_GAP 50
#define TCMSQ1_MVPA 434
#define VD_RATIO 1 // mV measured before and after voltage divider. #include <Filters.h>
const float cutoff_frequency = 50.0; // Hz
const float filter_time_constant = 1.0 / (2 * PI * cutoff_frequency); const int filter_order = 2;
class CurrentSensor { public:
CurrentSensor(int pin, int reading_gap, int mVpA); void readADCData();
float liveCurrent(); float current = 0.0;
float estimatedCurrent = 0.0; int pMax, pMin, P_p, pAvg; FilterOnePole filter; FilterOnePolecurrent_filter; private:
int _pin;
int _readingGap; int _mVpA;
long _lastReadingAt; float _readingAVG = 0;
SimpleKalmanFilter _currentFilter = SimpleKalmanFilter(20,2,0.01);
};
 
CurrentSensor::CurrentSensor(int pin, int reading_gap, int mVpA){
_pin = pin;
_readingGap = reading_gap;
_mVpA = mVpA;
_lastReadingAt = 0;
_readingAVG = 0;
filter = FilterOnePole(LOWPASS, 50,0); current_filter = FilterOnePole(LOWPASS, 50,0);
}
void CurrentSensor::readADCData(){ if((millis() - _lastReadingAt) > _readingGap){ int max = 0;
int min = 4096; long total = 0; float x = 0;
for(int i=0; i< ADC_SAMPLE_COUNT; i++){ int raw_reading = analogRead(_pin);
int reading = filter.input(raw_reading); if(reading > max ){
max = reading;
}
if(reading < min){ min = reading;
}
total = total + reading;
// delay(3);
}
pMax =max; pMin = min; P_p = (max - min) ;pAvg = total/ADC_SAMPLE_COUNT; x = (P_p/2) * 0.707; // RMS of voltage
if(x < 15){
current = 0;
}
else {
// current = (current * 0.95+0.05*((x * MV_PER_STEP*2000)/_mVpA));
 
// current = current_filter.input((x * MV_PER_STEP*2000)/_mVpA);
current	=	_currentFilter.updateEstimate(current_filter.input((x	* MV_PER_STEP*2000)/_mVpA));
}
_lastReadingAt = millis();
}
}
#endif


#define BLYNK_PRINT Serial
#define BLYNK_TEMPLATE_ID "TMPL3E_d3GcbH" #define BLYNK_TEMPLATE_NAME "IoT based Water level"
#define BLYNK_AUTH_TOKEN "0MUu1k16DRerv_ahiVp4iZpQ5QfcNufa" #include <Arduino.h>
#include <WiFi.h> #include <WiFiClient.h> #include <PubSubClient.h>
#include <BlynkSimpleEsp32.h> #include <Wire.h>
#include <LiquidCrystal_I2C.h> #include "currentSensor.h" #include "ThingSpeak.h" #define flowSensor 17
#define InMotor 23
#define OutMotor 19
#define currentt 32
#define OutMotor 19
#define lowLevel 18
#define highLevel 5
#define ldr 35
#define variableCurrent 32 WiFiClient client;
unsigned long myChannelNumber = 2499630;
const char * myWriteAPIKey = "M7ARTLUG4U4AHW81";
 
LiquidCrystal_I2C lcd(0x27, 16, 2);
CurrentSensor LA1(34,ADC_READ_GAP, 510.999); char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "PROJECT"; char pass[] = "123456789"; BlynkTimer timer;
int mVperAmp = 520; int Watt = 0;
double Voltage = 0; double VRMS = 0; double AmpsRMS = 0; bool Mode;
struct{
int LowLevel; int HighLevel; int LDR;
float Current; float cur;
int TankLevel;
}Sensor;
long currentMillis = 0; long previousMillis = 0; int interval = 1000; booleanledState = LOW;
float calibrationFactor = 4.5; volatile byte pulseCount; byte pulse1Sec = 0;
float flowRate;
unsigned int flowMilliLitres; unsigned long totalMilliLitres; long writingTimer = 20;
long startTime = 0; long waitTime = 0; BLYNK_WRITE(V0){
 
int button= param.asInt(); if(button==1){Mode = true; lcd.clear(); lcd.print("ManualMode Enable"); delay(1000);
lcd.clear();}
else { Mode = false; lcd.clear(); lcd.print("Auto Mode"); delay(1000); lcd.clear();}
}
BLYNK_WRITE(V1){
int button= param.asInt(); if(button==1){digitalWrite(OutMotor,HIGH);} else {digitalWrite(OutMotor,LOW);}
} BLYNK_WRITE(V2){
int button= param.asInt(); if(button==1){digitalWrite(InMotor,LOW);} else {digitalWrite(InMotor,HIGH);}
}
void IRAM_ATTR pulseCounter()
{
pulseCount++;
}
void sensorReading()
{
Sensor.Current = analogRead(variableCurrent); Sensor.cur = Sensor.Current/1000.0;
Sensor.LDR = map(analogRead(ldr),0,4096,0,100); Sensor.Current = analogRead(currentt); Sensor.LowLevel = digitalRead(lowLevel); Sensor.HighLevel = digitalRead(highLevel);
 
lcd.setCursor(0,1); lcd.print("Current:"); lcd.setCursor(8,1); lcd.print("	"); lcd.setCursor(8,1); lcd.print(Sensor.cur); lcd.print("mA"); lcd.setCursor(9,0); lcd.print("WL:");
Blynk.virtualWrite(V4,Sensor.cur); if(Sensor.LDR<50){
if(Mode == true){ digitalWrite(OutMotor,LOW); Serial.println("Motor OFF");
}}
else{
if(Mode == true){ digitalWrite(OutMotor,HIGH); Serial.println("Motor ON");
}}
Serial.println(Sensor.LDR);
if(Sensor.LowLevel ==0 &&Sensor.HighLevel == 0)
{
if(Sensor.cur<0.45){ digitalWrite(InMotor,LOW);} //ON else{ digitalWrite(InMotor,HIGH);} digitalWrite(OutMotor,LOW);
Sensor.TankLevel = 0; Blynk.virtualWrite(V3,0); lcd.setCursor(12,0); lcd.print("EMTY");
}
if(Sensor.LowLevel == 1 &&Sensor.HighLevel == 1)
{
digitalWrite(InMotor,HIGH);
 
Sensor.TankLevel = 100; Blynk.virtualWrite(V3,100); lcd.setCursor(12,0); lcd.print("FULL");
}
}
void FlowSensor()
{
currentMillis = millis();
if (currentMillis - previousMillis> interval) { pulse1Sec = pulseCount;
pulseCount = 0;
flowRate = ((1000.0 / (millis() - previousMillis)) * pulse1Sec) / calibrationFactor; previousMillis = millis();
flowMilliLitres = (flowRate / 60) * 1000; totalMilliLitres += flowMilliLitres; lcd.setCursor(0,0);
lcd.print("WT:"); lcd.setCursor(3,0); lcd.print(totalMilliLitres / 1000); lcd.print("L");
Blynk.virtualWrite(V2,totalMilliLitres / 1000);
}}
void initWiFi() { WiFi.mode(WIFI_STA); WiFi.begin(ssid, pass);
while (WiFi.status() != WL_CONNECTED) { Serial.print('.');
delay(100);
}}
void updateThingSpeak()
{
ThingSpeak.setField(1, String(Sensor.Current/1000.0)); ThingSpeak.setField(2, String(totalMilliLitres / 1000));
 
ThingSpeak.setField(3, String(Sensor.TankLevel)); ThingSpeak.setField(4, random(220,230)); ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey); Serial.println("upload Success");
}
void setup()
{
Serial.begin(115200); pinMode(flowSensor, INPUT_PULLUP); pinMode(currentt,INPUT); pinMode(ldr,INPUT); pinMode(variableCurrent,INPUT); pinMode(InMotor,OUTPUT); pinMode(OutMotor,OUTPUT); pinMode(lowLevel,INPUT); pinMode(highLevel,INPUT); digitalWrite(InMotor,HIGH); digitalWrite(OutMotor,LOW); pulseCount = 0;
flowRate = 0.0;
flowMilliLitres = 0;
totalMilliLitres = 0;
previousMillis = 0;
attachInterrupt(digitalPinToInterrupt(flowSensor), pulseCounter, FALLING); lcd.begin();
lcd.backlight(); lcd.clear();
lcd.print("connecting Blynk"); initWiFi();
delay(500); Blynk.begin(auth, ssid, pass); lcd.clear();
lcd.print("Blynk Connected"); delay(1000);
 
lcd.clear();
lcd.print("IoT based Water"); lcd.setCursor(0,1); lcd.print("Tank moni system"); delay(1000);
lcd.clear(); ThingSpeak.begin(client);
timer.setInterval(1000L,sensorReading); timer.setInterval(500L,FlowSensor); timer.setInterval(20000L,updateThingSpeak);
}
void loop()
{
Blynk.run();
timer.run();
}

